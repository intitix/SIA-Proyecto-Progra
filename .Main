import javax.swing.*; // Importa la biblioteca Swing para crear interfaces gráficas
import java.awt.*; // Importa la biblioteca AWT para componentes de interfaz gráfica
import java.text.ParseException; // Importa ParseException para manejar errores de análisis de fechas
import java.util.Date; // Importa Date para trabajar con fechas
import java.text.SimpleDateFormat; // Importa SimpleDateFormat para formatear fechas
import java.util.HashMap; // Importa HashMap para almacenar pares clave-valor
import java.io.IOException; // Importa IOException para manejar errores de entrada/salida
import java.util.NoSuchElementException; // Importa NoSuchElementException para manejar excepciones de elementos no encontrados

/**
 * Clase principal que inicializa el sistema y gestiona las atracciones y reservas del parque.
 */
public class Main {
    private static JFrame frame; // Ventana principal de la interfaz gráfica

    /**
     * Método principal que ejecuta la aplicación.
     *
     * @param args los argumentos de línea de comandos
     * @throws ParseException si hay un error al analizar la fecha
     */
    public static void main(String[] args) throws ParseException {
        // Crear mapa de atracciones
        HashMap<String, Atraccion> atracciones = new HashMap<>(); // Mapa para almacenar las atracciones del parque

        // Crear un formato de fecha
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm"); // Formato de fecha para las reservas

        // Inicializar parque
        Parque parqueCentral = new Parque("PUCV LANDIA", atracciones, 8, 18); // Crear una nueva instancia de Parque

        // Cargar datos de atracciones y reservas desde archivos CSV
        try {
            parqueCentral.cargarDatos("atracciones.csv"); // Cargar atracciones desde el archivo CSV
            System.out.println("Datos CSV de atracciones cargados Exitosamente"); // Mensaje de éxito

            // Imprimir las atracciones cargadas
            for (String key : parqueCentral.getMapaAtracciones().keySet()) {
                System.out.println(" - " + key); // Mostrar el nombre de cada atracción
            }

            // Cargar reservas
            parqueCentral.cargarDatosReservas("reservas.csv"); // Cargar reservas desde el archivo CSV
            System.out.println("Datos CSV de reservas cargados Exitosamente"); // Mensaje de éxito

            // Imprimir las reservas cargadas
            for (Atraccion atraccion : parqueCentral.getMapaAtracciones().values()) {
                System.out.println("Reservas para la atracción: " + atraccion.getNombre()); // Mostrar el nombre de la atracción
                for (Reserva reserva : atraccion.getReservas()) {
                    System.out.println(" - " + reserva); // Mostrar la información de cada reserva
                }
            }

        } catch (IOException e) {
            System.err.println("Error al cargar los datos: " + e.getMessage()); // Mensaje de error en la carga de datos

            // Valores iniciales en caso de no encontrar el archivo CSV
            atracciones.put("Montaña rusa", new Atraccion("Montaña rusa", 30, 10)); // Agregar atracción por defecto
            atracciones.put("Carrusel", new Atraccion("Carrusel", 20, 15)); // Agregar atracción por defecto
            System.out.println("Atracciones predeterminadas cargadas debido a la ausencia de un archivo CSV.");
        }

        // Crear reservas solo si la atracción está presente y no se han agregado previamente
        try {
            Atraccion montanaRusa = parqueCentral.buscarAtraccion("Montaña rusa"); // Buscar la atracción "Montaña rusa"
            // Si se encuentra la atracción, intentar agregar las reservas
            Date fechaReserva1 = sdf.parse("10/09/2024 14:00"); // Parsear la fecha de la primera reserva
            Date fechaReserva2 = sdf.parse("10/09/2024 15:00"); // Parsear la fecha de la segunda reserva

            // Agregar reservas si no existen
            agregarReservaSiNoExiste(montanaRusa, 10, fechaReserva1);
            agregarReservaSiNoExiste(montanaRusa, 15, fechaReserva2);

        } catch (NoSuchElementException e) {
            System.err.println(e.getMessage()); // Mostrar mensaje si no se encuentra la atracción
        } catch (ParseException e) {
            System.err.println("Error al crear reservas: " + e.getMessage()); // Mensaje de error al crear reservas
        }

        // Llamar al menú principal
        mostrarMenuPrincipal(parqueCentral); // Muestra el menú principal

        // Agregar ShutdownHook para guardar los datos al salir
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                parqueCentral.guardarDatos("atracciones.csv"); // Guardar atracciones en el archivo CSV
                parqueCentral.guardarDatosReservas("reservas.csv"); // Guardar reservas en el archivo CSV
                System.out.println("Datos guardados correctamente al salir.");
            } catch (IOException e) {
                System.err.println("Error al guardar los datos: " + e.getMessage()); // Mensaje de error al guardar datos
            }
        }));
    }

    /**
     * Agrega una reserva a una atracción si no existe una reserva similar.
     *
     * @param atraccion      La atracción a la que se agregará la reserva.
     * @param grupoPersonas  El número de personas en el grupo de la reserva.
     * @param fechaHora      La fecha y hora de la reserva.
     */
    private static void agregarReservaSiNoExiste(Atraccion atraccion, int grupoPersonas, Date fechaHora) {
        // Verificar si ya existe una reserva con los mismos parámetros
        if (atraccion.getReservas().stream().noneMatch(r -> r.getGrupoPersonas() == grupoPersonas && r.getFechaHora().equals(fechaHora))) {
            // Crear una nueva reserva si no existe
            Reserva reserva = new Reserva(grupoPersonas, atraccion, fechaHora);
            atraccion.agregarReserva(reserva); // Agregar la reserva a la atracción
            System.out.println("Reserva agregada: " + reserva); // Mensaje de confirmación
        }
    }

    /**
     * Muestra el menú principal de la aplicación.
     *
     * @param parqueCentral el parque para el que se mostrará el menú
     */
    public static void mostrarMenuPrincipal(Parque parqueCentral) {
        // Crear interfaz gráfica con JFrame
        frame = new JFrame("Menú Principal - SIA"); // Inicializa la ventana del menú principal
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Permite cerrar solo esta ventana
        frame.setSize(400, 300); // Establecer tamaño de la ventana
        frame.setLayout(new GridLayout(5, 1)); // Establecer el diseño del panel
        frame.setLocationRelativeTo(null); // Centrar la ventana en la pantalla

        // Crear y añadir componentes al menú
        JLabel lblTitulo = new JLabel("Bienvenido a PUCV LANDIA", SwingConstants.CENTER); // Título del menú
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 18)); // Establecer fuente del título
        frame.add(lblTitulo); // Añadir el título a la ventana

        // Botones para las diferentes secciones del menú
        JButton btnGestionAtracciones = new JButton("Gestión de Atracciones"); // Botón para gestión de atracciones
        JButton btnGestionReservas = new JButton("Gestión de Reservas"); // Botón para gestión de reservas
        JButton btnGestionParque = new JButton("Gestión de Parque y Estadísticas"); // Botón para gestión del parque
        JButton btnSalir = new JButton("Salir"); // Botón para salir de la aplicación

        // Añadir los botones a la ventana
        frame.add(btnGestionAtracciones); 
        frame.add(btnGestionReservas); 
        frame.add(btnGestionParque); 
        frame.add(btnSalir); 

        // Acción para gestionar atracciones
        btnGestionAtracciones.addActionListener(e -> {
            frame.dispose(); // Cerrar la ventana actual
            new GestorAtracciones(parqueCentral); // Abrir el gestor de atracciones
        });

        // Acción para gestionar reservas
        btnGestionReservas.addActionListener(e -> {
            frame.dispose(); // Cerrar la ventana actual
            new GestorReservas(parqueCentral); // Abrir el gestor de reservas
        });

        // Acción para gestionar el parque
        btnGestionParque.addActionListener(e -> {
            frame.dispose(); // Cerrar la ventana actual
            new GestorParque(parqueCentral); // Abrir el gestor del parque
        });

        // Acción para salir de la aplicación
        btnSalir.addActionListener(e -> {
            int respuesta = JOptionPane.showConfirmDialog(frame, "¿Está seguro que desea salir?", "Confirmación", JOptionPane.YES_NO_OPTION); // Confirmación para salir
            if (respuesta == JOptionPane.YES_OPTION) { // Si la respuesta es sí
                JOptionPane.showMessageDialog(frame, "Saliendo..."); // Mensaje de salida
                System.exit(0); // Cerrar la aplicación
            }
        });

        // Hacer visible la ventana
        frame.setVisible(true); 
    }
}
