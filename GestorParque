import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Scanner;

public class GestorParque {
    private final Parque parque;
    private final List<Reserva> reservas; // Lista de reservas
    private final Scanner lector;

    public GestorParque(Parque parque, List<Reserva> reservas, Scanner lector) {
        this.parque = parque;
        this.reservas = reservas; // Inicializar la lista de reservas
        this.lector = lector;
    }

    public void gestionarParque() {
        while (true) {
            System.out.print("\033[H\033[2J");
            System.out.flush();
            System.out.println("GESTIÓN DEL PARQUE");
            System.out.println("1. Cambiar nombre del parque");
            System.out.println("2. Modificar horario de apertura y cierre");
            System.out.println("3. Generar reporte");
            System.out.println("4. Volver al menú principal");
            System.out.print("Escoja una opción: ");
            
            try {
                int opcion = lector.nextInt();
                lector.nextLine(); // Limpiar el buffer

                switch (opcion) {
                    case 1 -> cambiarNombreParque();
                    case 2 -> modificarHorario();
                    case 3 -> generarReporte();
                    case 4 -> {
                        return; // Volver al menú principal
                    }
                    default -> System.out.println("Opción inválida. Intente de nuevo.");
                }
            } catch (Exception e) {
                System.out.println("Error: Entrada inválida. Por favor, ingrese un número.");
                lector.nextLine(); // Limpiar el buffer de entrada
            }
        }
    }

    private void cambiarNombreParque() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("CAMBIAR NOMBRE DEL PARQUE");
        System.out.print("Ingrese el nuevo nombre del parque: ");
        String nuevoNombre = lector.nextLine();
        parque.setNombre(nuevoNombre);
        System.out.println("Nombre del parque cambiado exitosamente.");
        System.out.println("Presione Enter para continuar...");
        lector.nextLine();
    }

    private void modificarHorario() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("MODIFICAR HORARIO");
        System.out.print("Ingrese la nueva hora de apertura (0-23): ");
        int nuevaHoraApertura = lector.nextInt();
        System.out.print("Ingrese la nueva hora de cierre (0-23): ");
        int nuevaHoraCierre = lector.nextInt();
        lector.nextLine(); // Limpiar el buffer

        if (nuevaHoraApertura < 0 || nuevaHoraApertura > 23 || nuevaHoraCierre < 0 || nuevaHoraCierre > 23) {
            System.out.println("Horas inválidas. Deben estar entre 0 y 23.");
        } else {
            parque.setHoraApertura(nuevaHoraApertura);
            parque.setHoraCierre(nuevaHoraCierre);
            System.out.println("Horario modificado exitosamente.");
        }

        System.out.println("Presione Enter para continuar...");
        lector.nextLine();
    }

    private void generarReporte() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
        System.out.println("REPORTE DEL PARQUE");

        // Generar el contenido del reporte en formato CSV
        StringBuilder reporte = new StringBuilder();
        reporte.append("Nombre del Parque,").append(parque.getNombre()).append("\n");
    
        // Capacidad máxima
        int capacidadMaxima = parque.getMapaAtracciones().values().stream()
                                    .mapToInt(Atraccion::getCapacidad)
                                    .sum();
        reporte.append("Capacidad Máxima,").append(capacidadMaxima).append("\n");
        System.out.println("Capacidad Máxima: " + capacidadMaxima);

        // Número de atracciones
        int numeroAtracciones = parque.getMapaAtracciones().size();
        reporte.append("Número de Atracciones,").append(numeroAtracciones).append("\n");
        System.out.println("Número de Atracciones: " + numeroAtracciones);

        // Número de reservas
        System.out.println("Número de Reservas Activas: " + reservas.size());
        reporte.append("Número de Reservas Activas,").append(reservas.size()).append("\n");

        // Generar el archivo de reporte
        try {
            generarArchivoReporte(reporte.toString());
            System.out.println("Reporte generado correctamente en reporte_parque.csv.");
        } catch (IOException e) {
            System.out.println("Error al generar el reporte: " + e.getMessage());
        }

        System.out.println("Presione Enter para continuar...");
        lector.nextLine();
    }

    private void generarArchivoReporte(String contenido) throws IOException {
        String nombreArchivo = "reporte_parque.csv"; // Archivo CSV
        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nombreArchivo), StandardCharsets.UTF_8))) {
            writer.write(contenido);
        }
    }
}
