import javax.swing.*;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class GestorParque {
    private final Parque parque;

    public GestorParque(Parque parque) {
        this.parque = parque;
        gestionar();
    }

private void gestionar() {
    JFrame frame = new JFrame("Gestión del Parque");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    frame.setSize(400, 300);
    frame.setLayout(new GridLayout(4, 1)); // Cambiado a 6 filas para incluir el título y todos los botones

    frame.setLocationRelativeTo(null); // Centrar la ventana en la pantalla

    // Título
    JLabel lblTitulo = new JLabel("Gestión del Parque", SwingConstants.CENTER);
    lblTitulo.setFont(new Font("Arial", Font.BOLD, 18));
    frame.add(lblTitulo);

    // Crear botones
    JButton btnModificarHorario = new JButton("Modificar Horario");
    JButton btnGenerarReporte = new JButton("Generar Reporte");
    JButton btnVolver = new JButton("Volver al Menú Principal");

    // Agregar botones al frame
    frame.add(btnModificarHorario);
    frame.add(btnGenerarReporte);
    frame.add(btnVolver); // Agregando el botón "Volver"

    // Asignar acciones a los botones
    btnModificarHorario.addActionListener(e -> modificarHorario());
    btnGenerarReporte.addActionListener(e -> generarReporte());

    // Acción del botón "Volver"
    btnVolver.addActionListener(e -> {
        frame.dispose(); // Cerrar la ventana actual
        Main.mostrarMenuPrincipal(parque); // Regresar al menú principal
    });

    // Mostrar la ventana
    frame.setVisible(true);
}


    private void modificarHorario() {
        JPanel panel = new JPanel(new GridLayout(2, 2));
        JTextField txtApertura = new JTextField();
        JTextField txtCierre = new JTextField();
        panel.add(new JLabel("Nueva Hora de Apertura (0-23):"));
        panel.add(txtApertura);
        panel.add(new JLabel("Nueva Hora de Cierre (0-23):"));
        panel.add(txtCierre);

        int option = JOptionPane.showConfirmDialog(null, panel, "Modificar Horario", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                int nuevaHoraApertura = Integer.parseInt(txtApertura.getText());
                int nuevaHoraCierre = Integer.parseInt(txtCierre.getText());

                if (nuevaHoraApertura < 0 || nuevaHoraApertura > 23 || nuevaHoraCierre < 0 || nuevaHoraCierre > 23) {
                    JOptionPane.showMessageDialog(null, "Horas inválidas. Deben estar entre 0 y 23.");
                } else {
                    parque.setHoraApertura(nuevaHoraApertura);
                    parque.setHoraCierre(nuevaHoraCierre);
                    JOptionPane.showMessageDialog(null, "Horario modificado exitosamente.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese números válidos.");
            }
        }
    }

    private void generarReporte() {
    // Generar contenido del reporte
    StringBuilder reporte = new StringBuilder();
    reporte.append("Nombre del Parque,").append(parque.getNombre()).append("\n");

    // Horario de apertura y cierre
    int horaApertura = parque.getHoraApertura(); // Asegúrate de tener este método en la clase Parque
    int horaCierre = parque.getHoraCierre(); // Asegúrate de tener este método en la clase Parque
    reporte.append("Horario de Apertura,").append(horaApertura).append("\n");
    reporte.append("Horario de Cierre,").append(horaCierre).append("\n");

    // Capacidad máxima
    int capacidadMaxima = parque.getMapaAtracciones().values().stream()
                                .mapToInt(Atraccion::getCapacidad)
                                .sum();
    reporte.append("Capacidad Máxima,").append(capacidadMaxima).append("\n");

    // Número de atracciones
    int numeroAtracciones = parque.getMapaAtracciones().size();
    reporte.append("Número de Atracciones,").append(numeroAtracciones).append("\n");

    // Número de reservas
    int numeroReservas = 0; 
    for (Atraccion atraccion : parque.getMapaAtracciones().values()) {
        numeroReservas += atraccion.getReservas().size(); 
    }
    reporte.append("Número de Reservas Activas,").append(numeroReservas).append("\n");

    // Generar archivo de reporte
    try {
        generarArchivoReporte(reporte.toString());
        JOptionPane.showMessageDialog(null, "Reporte generado correctamente en reporte_parque.csv.");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error al generar el reporte: " + e.getMessage());
    }
}

private void generarArchivoReporte(String contenido) throws IOException {
    // Define el nombre del archivo y la ruta donde se guardará
    String nombreArchivo = "reporte_parque.csv";
    
    // Usar un BufferedWriter para crear el archivo CSV
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo))) {
        // Escribir el contenido en el archivo
        writer.write(contenido);
    }
}
}
