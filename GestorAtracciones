import javax.swing.*;
import java.awt.*;


public class GestorAtracciones {
    private final Parque parque;
    private JFrame frame;

    public GestorAtracciones(Parque parque) {
        this.parque = parque;
        gestionar();
    }

    public void gestionar() {
        // Crear el frame
        frame = new JFrame("Menu Atracciones");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new GridLayout(7, 1)); // Crear un layout con 6 botones
        frame.setLocationRelativeTo(null); // Para centrar el JFrame en la pantalla
        
        JLabel lblTitulo = new JLabel("Gestor de Atracciones", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 18));
        frame.add(lblTitulo);
        
        // Crear botones para las opciones del menú
        JButton btnCrearAtraccion = new JButton("1. Crear Atracción");
        JButton btnListaAtracciones = new JButton("2. Lista Atracciones");
        JButton btnModificarAtraccion = new JButton("3. Modificar Atracción");
        JButton btnBuscarPorCapacidad = new JButton("4. Buscar Atracciones por Rango de Capacidad");
        JButton btnEliminarAtraccion = new JButton("5. Eliminar Atracción");
        JButton btnVolver = new JButton("6. Volver al Menú Principal");

        // Agregar eventos a los botones
        btnCrearAtraccion.addActionListener(e -> crearAtraccion());
        btnListaAtracciones.addActionListener(e -> mostrarAtracciones());
        btnModificarAtraccion.addActionListener(e -> modificarAtraccion());
        btnBuscarPorCapacidad.addActionListener(e -> mostrarAtraccionesPorRango());
        btnEliminarAtraccion.addActionListener(e -> eliminarAtraccion());
        btnVolver.addActionListener(e -> {
            frame.dispose(); // Cierra el gestor de atracciones
            Main.mostrarMenuPrincipal(parque); // Vuelve al menú principal
        });
        
        // Añadir botones al frame
        frame.add(btnCrearAtraccion);
        frame.add(btnListaAtracciones);
        frame.add(btnModificarAtraccion);
        frame.add(btnBuscarPorCapacidad);
        frame.add(btnEliminarAtraccion);
        frame.add(btnVolver);
        

        // Hacer visible el frame
        frame.setVisible(true);
    }

    private void crearAtraccion() {
        // Abrir diálogo para ingresar los datos de la atracción
        String nombre = JOptionPane.showInputDialog(frame, "Ingrese el nombre de la nueva atracción:");
        String capacidadStr = JOptionPane.showInputDialog(frame, "Ingrese la capacidad:");
        String duracionStr = JOptionPane.showInputDialog(frame, "Ingrese la duración (en minutos):");

        if (nombre != null && capacidadStr != null && duracionStr != null) {
            try {
                int capacidad = Integer.parseInt(capacidadStr);
                int duracion = Integer.parseInt(duracionStr);
                Atraccion nuevaAtraccion = new Atraccion(nombre, capacidad, duracion);
                parque.agregarAtraccion(nombre, nuevaAtraccion);
                JOptionPane.showMessageDialog(frame, "Atracción creada exitosamente.");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(frame, "Error: Ingrese valores numéricos válidos para capacidad y duración.");
            }
        }
    }

    private void mostrarAtracciones() {
        StringBuilder listaAtracciones = new StringBuilder("Lista de atracciones:\n");

        for (Atraccion atraccion : parque.getMapaAtracciones().values()) {
            listaAtracciones.append(atraccion.getNombre()).append(" - Capacidad: ")
                    .append(atraccion.getCapacidad()).append(" - Duración: ")
                    .append(atraccion.getDuracion()).append(" min\n");
        }

        JOptionPane.showMessageDialog(frame, listaAtracciones.toString());
    }

    private void modificarAtraccion() {
        String nombre = JOptionPane.showInputDialog(frame, "Ingrese el nombre de la atracción a modificar:");
        Atraccion atraccion = parque.buscarAtraccion(nombre);

        if (atraccion != null) {
            String nuevoNombre = JOptionPane.showInputDialog(frame, "Ingrese el nuevo nombre (deje vacío para mantener):", atraccion.getNombre());
            String nuevaCapacidadStr = JOptionPane.showInputDialog(frame, "Ingrese la nueva capacidad (deje vacío para mantener):", atraccion.getCapacidad());
            String nuevaDuracionStr = JOptionPane.showInputDialog(frame, "Ingrese la nueva duración (deje vacío para mantener):", atraccion.getDuracion());

            if (nuevoNombre != null && !nuevoNombre.isEmpty()) {
                atraccion.setNombre(nuevoNombre);
            }

            if (nuevaCapacidadStr != null && !nuevaCapacidadStr.isEmpty()) {
                try {
                    atraccion.setCapacidad(Integer.parseInt(nuevaCapacidadStr));
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(frame, "Error: Capacidad no válida.");
                }
            }

            if (nuevaDuracionStr != null && !nuevaDuracionStr.isEmpty()) {
                try {
                    atraccion.setDuracion(Integer.parseInt(nuevaDuracionStr));
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(frame, "Error: Duración no válida.");
                }
            }

            JOptionPane.showMessageDialog(frame, "Atracción modificada exitosamente.");
        } else {
            JOptionPane.showMessageDialog(frame, "Atracción no encontrada.");
        }
    }

    private void mostrarAtraccionesPorRango() {
        String capacidadMinStr = JOptionPane.showInputDialog(frame, "Ingrese la capacidad mínima:");
        String capacidadMaxStr = JOptionPane.showInputDialog(frame, "Ingrese la capacidad máxima:");

        try {
            int capacidadMin = Integer.parseInt(capacidadMinStr);
            int capacidadMax = Integer.parseInt(capacidadMaxStr);

            StringBuilder atraccionesEnRango = new StringBuilder("Atracciones en el rango:\n");

            for (Atraccion atraccion : parque.getMapaAtracciones().values()) {
                if (atraccion.getCapacidad() >= capacidadMin && atraccion.getCapacidad() <= capacidadMax) {
                    atraccionesEnRango.append(atraccion.getNombre()).append(" - Capacidad: ")
                            .append(atraccion.getCapacidad()).append("\n");
                }
            }

            JOptionPane.showMessageDialog(frame, atraccionesEnRango.toString());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Error: Ingrese valores numéricos válidos.");
        }
    }

    private void eliminarAtraccion() {
        String nombreEliminar = JOptionPane.showInputDialog(frame, "Ingrese el nombre de la atracción a eliminar:");
        if (parque.eliminarAtraccion(nombreEliminar)) {
            JOptionPane.showMessageDialog(frame, "Atracción eliminada exitosamente.");
        } else {
            JOptionPane.showMessageDialog(frame, "Atracción no encontrada.");
        }
    }
}
